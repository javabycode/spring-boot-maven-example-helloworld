version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  jq: circleci/jq@2.0.1

executors:
  utility:
    docker:
      - image: buildpack-deps:jessie
    working_directory: /tmp

commands:
  conf_ssm_deploy_wildfly:
    description: "Generate parameters for the DeployWildflyDomainMode SSM document"
    parameters:
      repository:
        type: "string"
      package:
        type: "string"
      artifact:
        type: "string"
      version:
        type: "string"
      ext:
        type: "enum"
        enum: ["jar", "war"]
      domainControllerHost:
        type: "string"
      serverGroupName:
        type: "string"
    steps:
      - jq/install
      - run: mkdir -p workspace
      - run:
          name: Generate Command Parameters
          command: |
            COMMAND_PARAMETERS=$(cat \<<END_HEREDOC
            {
              "S3Bucket": [
                "na"
              ],
              "artifactName": [
                "<< parameters.artifact >>-<< parameters.version >>.<< parameters.ext >>"
              ],
              "artifactPackage": [
                "<< parameters.package >>"
              ],
              "artifactRepoAuthHeader": [
                "X-JFrog-Art-Api: $ARTIFACTORY_API_TOKEN"
              ],
              "artifactRepoUrl": [
                "<< parameters.repository >>"
              ],
              "artifactVersion": [
                "<< parameters.version >>"
              ],
              "autoscalingGroupName": [
                "na"
              ],
              "debug": [
                "true"
              ],
              "deployDir": [
                "/opt"
              ],
              "deployName": [
                "<< parameters.artifact >>.<< parameters.ext >>"
              ],
              "deployVersion": [
                "<< parameters.version >>"
              ],
              "domainControllerHost": [
                "<< parameters.domainControllerHost >>"
              ],
              "executionTimeout": [
                "3600"
              ],
              "notifyNewRelic": [
                "na"
              ],
              "scriptDir": [
                "/home/bamboo/mercury1-safe-ssh/ssh/scripts"
              ],
              "targetServerGroup": [
                "<< parameters.serverGroupName >>"
              ],
              "wildflyDir": [
                "/applications/mtw"
              ],
              "workingDirectory": [
                ""
              ]
            }
            END_HEREDOC
            )
            echo "$COMMAND_PARAMETERS" | jq -c > /tmp/workspace/deploy.json
      - persist_to_workspace:
          root: workspace
          paths:
            - deploy.json
  ssm_send_command:
    description: "Execute command against a target resource group"
    parameters:
      documentName:
        type: string
      documentVersion:
        type: string
      resourceGroupName:
        type: string
      timeout:
        type: string
        default: "60"
      concurrency:
        type: string
        default: "1"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: SSM Send Command
          command: |
            aws ssm send-command \
            --document-name "<< parameters.documentName >>" \
            --document-version "<< parameters.documentVersion >>" \
            --targets '[{"Key":"resource-groups:Name","Values":["<< parameters.resourceGroupName >>"]}]' \
            --parameters "$(cat /tmp/workspace/deploy.json)" \
            --timeout-seconds << parameters.timeout >> \
            --max-concurrency "<< parameters.concurrency >>" \
            --max-errors "0" > /dev/null

jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk-node
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "./pom.xml" }}
      - run:
          name: Install Dependencies
          command: mvn dependency:go-offline --settings 'pom.xml'
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "./pom.xml" }}
  test:
    docker:
      - image: circleci/openjdk:8-jdk-node
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "./pom.xml" }}
      - run:
          name: Run Tests
          command: mvn verify --settings 'pom.xml'
      - store_test_results:
          path: target/surefire-reports
  publish:
    docker:
      - image: circleci/openjdk:8-jdk-node
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "./pom.xml" }}
      - run:
          name: Build Artifact
          command: mvn package
      - run:
          name: Prepare artifacts folder
          command: mkdir /tmp/artifacts
      - store_artifacts:
          path: target/example.jar
          destination: example-artifact.jar
      - store_artifacts:
          path: /tmp/artifacts
  conf_deploy:
    executor: utility
    parameters:
      repository:
        type: "string"
      domainControllerHost:
        type: "string"
      serverGroupName:
        type: "string"
    steps:
#      TODO: grab all the maven goodies
      - conf_ssm_deploy_wildfly:
          repository: << parameters.repository >>
          package: "org.primefaces.primefaces"
          artifact: "primefaces"
          version: "6.2.10"
          ext: "war"
          domainControllerHost: << parameters.domainControllerHost >>
          serverGroupName: << parameters.serverGroupName >>
  deploy:
    executor: aws-cli/default
    parameters:
      resourceGroupName:
        type: string
    steps:
      - aws-cli/install
      - aws-cli/setup:
          aws-region: AWS_REGION
      - run: aws --version
      - ssm_send_command:
          documentName: "DeployWildflyDomainMode"
          documentVersion: "13"
          resourceGroupName: << parameters.resourceGroupName >>

workflows:
  version: 2.1
  features:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy_dev:
          type: approval
          requires:
            - test
      - deploy_test:
          type: approval
          requires:
            - test
      - conf_deploy:
          name: conf_deploy_dev
          context: dev
          repository: "mytutor.jfrog.io/artifactory/libs-release-local"
          domainControllerHost: "dc-dev.mytutor.co.uk"
          serverGroupName: "main-server-group"
          requires:
            - deploy_dev
      - conf_deploy:
          name: conf_deploy_test
          context: test
          repository: "mytutor.jfrog.io/artifactory/libs-release-local"
          domainControllerHost: "dc-test.mytutor.co.uk"
          serverGroupName: "test2"
          requires:
            - deploy_test